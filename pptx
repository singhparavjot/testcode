# Define base directory
$baseDir = "C:\PARAV-AKS"

# Ensure fresh start by removing any existing directory
if (Test-Path $baseDir) {
    Remove-Item -Recurse -Force $baseDir
}
New-Item -ItemType Directory -Path $baseDir

# Create folder structure
$folders = @(
    "infrastructure\base_deployment\tfvars",
    "infrastructure\variables",
    "infrastructure\k8s",
    "infrastructure\modules\aks",
    "infrastructure\modules\container_registry",
    "infrastructure\modules\key_vault",
    "infrastructure\modules\log_analytics"
)

foreach ($folder in $folders) {
    New-Item -ItemType Directory -Path (Join-Path -Path $baseDir -ChildPath $folder)
}

# Create files with content
$files = @{
    "infrastructure\base_deployment\tfvars\dev.tfvars" = "resource_group_name = 'devResourceGroup'
location = 'eastus'
aks_name = 'devAKSCluster'
acr_name = 'devacrregistry'"
    "infrastructure\base_deployment\tfvars\prod.tfvars" = "resource_group_name = 'prodResourceGroup'
location = 'eastus'
aks_name = 'prodAKSCluster'
acr_name = 'prodacrregistry'"
    "infrastructure\base_deployment\tfvars\sit.tfvars" = "resource_group_name = 'sitResourceGroup'
location = 'eastus'
aks_name = 'sitAKSCluster'
acr_name = 'sitacrregistry'"
    "infrastructure\base_deployment\tfvars\uat.tfvars" = "resource_group_name = 'uatResourceGroup'
location = 'eastus'
aks_name = 'uatAKSCluster'
acr_name = 'uatacrregistry'"
    "infrastructure\base_deployment\main.tf" = @"
terraform {
  backend "azurerm" {}
}

module "log_analytics" {
  source              = "../modules/log_analytics"
  resource_group_name = var.resource_group_name
  location            = var.location
  prefix              = var.prefix
  tags                = var.tags
}

module "key_vault" {
  source              = "../modules/key_vault"
  resource_group_name = var.resource_group_name
  location            = var.location
  tenant_id           = var.tenant_id
  prefix              = var.prefix
  tags                = var.tags
}

module "aks" {
  source              = "../modules/aks"
  resource_group_name = var.resource_group_name
  location            = var.location
  aks_name            = var.aks_name
  log_analytics_workspace_id = module.log_analytics.log_analytics_workspace_id
  tags                = var.tags
}

module "container_registry" {
  source              = "../modules/container_registry"
  resource_group_name = var.resource_group_name
  location            = var.location
  acr_name            = var.acr_name
  tags                = var.tags
}
"@
    "infrastructure\base_deployment\provider.tf" = @"
provider "azurerm" {
  features {}
}

provider "helm" {
  kubernetes {
    host                   = azurerm_kubernetes_cluster.aks.kube_config[0].host
    client_certificate     = base64decode(azurerm_kubernetes_cluster.aks.kube_config[0].client_certificate)
    client_key             = base64decode(azurerm_kubernetes_cluster.aks.kube_config[0].client_key)
    cluster_ca_certificate = base64decode(azurerm_kubernetes_cluster.aks.kube_config[0].cluster_ca_certificate)
  }
}

provider "kubernetes" {
  host                   = azurerm_kubernetes_cluster.aks.kube_config[0].host
  client_certificate     = base64decode(azurerm_kubernetes_cluster.aks.kube_config[0].client_certificate)
  client_key             = base64decode(azurerm_kubernetes_cluster.aks.kube_config[0].client_key)
  cluster_ca_certificate = base64decode(azurerm_kubernetes_cluster.aks.kube_config[0].cluster_ca_certificate)
}
"@
    "infrastructure\base_deployment\variables.tf" = @"
variable "resource_group_name" {}
variable "location" {}
variable "prefix" {}
variable "tenant_id" {}
variable "aks_name" {}
variable "acr_name" {}
variable "tags" {
  type    = map(string)
  default = {}
}
"@
    "infrastructure\variables\vars-dev.yml" = @"
variables:
  resourceGroup: 'devResourceGroup'
  location: 'eastus'
  aksCluster: 'devAKSCluster'
  acrName: 'devacrregistry'
  imageName: 'training-environment'
  imageTag: 'latest'
"@
    "infrastructure\variables\vars-prod.yml" = @"
variables:
  resourceGroup: 'prodResourceGroup'
  location: 'eastus'
  aksCluster: 'prodAKSCluster'
  acrName: 'prodacrregistry'
  imageName: 'training-environment'
  imageTag: 'latest'
"@
    "infrastructure\variables\vars-sit.yml" = @"
variables:
  resourceGroup: 'sitResourceGroup'
  location: 'eastus'
  aksCluster: 'sitAKSCluster'
  acrName: 'sitacrregistry'
  imageName: 'training-environment'
  imageTag: 'latest'
"@
    "infrastructure\variables\vars-uat.yml" = @"
variables:
  resourceGroup: 'uatResourceGroup'
  location: 'eastus'
  aksCluster: 'uatAKSCluster'
  acrName: 'uatacrregistry'
  imageName: 'training-environment'
  imageTag: 'latest'
"@
    "infrastructure\k8s\windows-vm-deployment.yaml" = @"
apiVersion: apps/v1
kind: Deployment
metadata:
  name: windows-vm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: windows-vm
  template:
    metadata:
      labels:
        app: windows-vm
    spec:
      nodeSelector:
        "kubernetes.io/os": windows
      containers:
      - name: windows-vm
        image: <your-windows-container-image>
        ports:
        - containerPort: 3389
"@
    "infrastructure\k8s\windows-vm-service.yaml" = @"
apiVersion: v1
kind: Service
metadata:
  name: windows-vm-service
spec:
  selector:
    app: windows-vm
  ports:
    - protocol: TCP
      port: 3389
      targetPort: 3389
  type: LoadBalancer
"@
    "azure-pipelines.yml" = @"
trigger:
- main

parameters:
- name: environments
  type: object
  default:
    - name: dev
      subscriptionConnection: 'dev-service-connection'
    - name: sit
      subscriptionConnection: 'sit-service-connection'
    - name: uat
      subscriptionConnection: 'uat-service-connection'
    - name: prod
      subscriptionConnection: 'prod-service-connection'

pool:
  vmImage: 'ubuntu-latest'

variables:
  terraformVersion: '1.0.0'

stages:
- ${{ each env in parameters.environments }}:
  - stage: DeployInfrastructureTo${{ env.name }}
    displayName: Deploy Infrastructure to ${{ env.name }} Environment
    variables:
      - template: infrastructure/variables/vars-${{ env.name }}.yml
    jobs:
    - job: DeploymentPrerequisites
      steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: ${{ env.subscriptionConnection }}
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az group create --name $(resourceGroup) --location $(location)
            az storage account create --name terraformbackend --resource-group $(resourceGroup) --location $(location) --sku Standard_LRS
            az storage container create --name tfstate --account-name terraformbackend

    - job: InfrastructureDeployment
      dependsOn: DeploymentPrerequisites
      steps:
      - task: InstallTerraformInstaller@0
        inputs:
          terraformVersion: $(terraformVersion)

      - script: terraform init -backend-config="resource_group_name=$(resourceGroup)" -backend-config="storage_account_name=terraformbackend" -backend-config="container_name=tfstate" -backend-config="key=terraform.tfstate"
        displayName: 'Terraform Init'

      - script: terraform plan -out=plan.tfplan -var-file=infrastructure/base_deployment/tfvars/${{ env.name }}.tfvars
        displayName: 'Terraform Plan'

      - script: terraform apply -input=false plan.tfplan
        displayName: 'Terraform Apply'

- stage: BuildAndPushDockerImage
  dependsOn: [${{ parameters.environments.name }}]
  jobs:
  - job: BuildAndPushDockerImage
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: ${{ env.subscriptionConnection }}
        repository: '$(acrName)/$(imageName)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(imageTag)

- stage: Deploy
  dependsOn: BuildAndPushDockerImage
  jobs:
  - job: Deploy
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: ${{ env.subscriptionConnection }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(resourceGroup) --name $(aksCluster)
          helm repo add beryju https://charts.beryju.org
          helm repo update
          helm install guacamole beryju/guacamole --set guacamole.server.image.tag=1.2.0
          kubectl apply -f k8s/windows-vm-deployment.yaml
          kubectl apply -f k8s/windows-vm-service.yaml
"@
    "Dockerfile" = @"
FROM mcr.microsoft.com/windows/servercore:ltsc2019

# Install necessary packages
RUN powershell -Command \\
    Add-WindowsFeature RDS-RD-Server

# Enable RDP
RUN powershell -Command \\
    Set-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server' -Name "fDenyTSConnections" -Value 0

# Open the RDP port
EXPOSE 3389

# Start RDP
CMD ["powershell", "Start-Service -Name TermService; while ($true) { Start-Sleep -Seconds 3600 }"]
"@
}

foreach ($path in $files.Keys) {
    New-Item -ItemType File -Path (Join-Path -Path $baseDir -ChildPath $path) -Force | Out-Null
    Set-Content -Path (Join-Path -Path $baseDir -ChildPath $path) -Value $files[$path]
}

# Create a zip file
$zipPath = "C:\PARAV-AKS.zip"
if (Test-Path $zipPath) {
    Remove-Item -Force $zipPath
}
Add-Type -AssemblyName System.IO.Compression.FileSystem
[System.IO.Compression.ZipFile]::CreateFromDirectory($baseDir, $zipPath)

Write-Output "Zip file created at: $zipPath"
